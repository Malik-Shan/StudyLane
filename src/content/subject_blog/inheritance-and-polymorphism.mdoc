---
draft: false
readtime: true
title: Inheritance and Polymorphism
published: 2024-11-01T20:24:00.000Z
bannerImg:
  discriminant: false
category:
  - programming
tag: []
postedBy: admin
---
## Inheritance

It's a mechanism in which a class inherits the data and functions of another class. Inheritance allows us to use same code (data & functions) without the need of creating the same code. To inherit the class we use `:` symbol.

The class that is inherited is called **base class**.

The class that inherits it is called **derived class**.

```cpp
// Base Class
class Parent{
   // codeblock
};
// Derived Class
class Child: public Parent{
   // codeblock
};
```

Types of inheritance:

- Single Inheritance
- Multilevel Inheritance
- Multiple Inheritance
- Hierarchical Inheritance
- Hybrid Inheritance

#### Single Inheritance:

It's the most primitive type of inheritance, in which a class inherit from a base class. All the data members are accessible to the derived class according to access specifier.

```cpp
// Base Class
class Parent{
   // codeblock
};
// Derived Class
class Child: public Parent{
   // codeblock
};
```

#### Multilevel Inheritance:

In this a class is derived from a class that's alread derived from another class.

```cpp
// Base Class
class GrandParent{
  // codeblock
};
// Derived Class
class Parent: public GrandParent{
   // codeblock
};
// Derived Class
class Child: public Parent{
   // codeblock
};
```

#### Muiple Inheritance:

When a class is derived from multiple classes it's called **multiple inheritance**. The classes are separated using comma `,` .

```cpp
//Base Class
class Mammal{
  //codeblock
};
//Base Class
class WingedAnimal{
  //codeblock
};
class Bat: public Mammal, public WingedAnimal{
  //codeblock
};
```

#### **Hierarchical Inheritance:**

In hierarchial inheritance a class is inherited by multiple classes. It's a tree-like structure where each class acts as base class for one or more classes.

```cpp
class class_A {};

class class_B: public class_A {};

class class_C : public class_A {};

class class_D: public class_B {};

class class_E: public class_C {}; 
```

#### **Hybrid Inheritance:**

Hybrid inheritance is a combination of two or more type of inheritance. **For Example** a program showing both single inheritance and hierarchial inheritance is a hybrid inheritance.

```cpp
class class_A {};

class class_B {};

class class_C {};

class class_D: public class_A, public class_B, public class_C {};

class class_E: public class_D {};

class class_F: public class_D {};
```

## public, protected and private inheritance in C++

- **public inheritance** makes `public` members of the base class `public` in the derived class, and the `protected` members of the base class remain `protected` in the derived class.
- **protected inheritance** makes the `public` and `protected` members of the base class `protected` in the derived class.
- **private inheritance** makes the `public` and `protected` members of the base class `private` in the derived class. They're inaccessible to the derived class.

```cpp
class Base {
  public:
    int x;
  protected:
    int y;
  private:
    int z;
};
class PublicDerived: public Base {
  // x is public
  // y is protected
  // z is not accessible from PublicDerived
};
class ProtectedDerived: protected Base {
  // x is protected
  // y is protected
  // z is not accessible from ProtectedDerived
};
class PrivateDerived: private Base {
  // x is private
  // y is private
  // z is not accessible from PrivateDerived
};
```

#### Accessibility in public Inheritance

{% table %}
- Accessibility
- private members
- protected members
- public memebers
---
- Base Class
- Yes
- Yes
- Yes
---
- Derived Class
- No
- Yes
- Yes
{% /table %}

#### Accessibility in protected Inheritance

{% table %}
- Accessibility
- private members
- protected members
- public memebers
---
- Base Class
- Yes
- Yes
- Yes
---
- Derived Class
- No
- Yes
- Yes (inherited as protected variables)
{% /table %}

#### Accessibility in private Inheritance

{% table %}
- Accessibility
- private members
- protected members
- public memebers
---
- Base Class
- Yes
- Yes
- Yes
---
- Derived Class
- No
- Yes (inherited as private variables)
- Yes (inherited as private variables)
{% /table %}

## Polymorphism

Polymorphism comes from a **greek** word meaning "*many shapes/many forms*". It's a concept in object-oriented programming that's used when multiple classes are related using inheritance. As the name suggests the polymorphism allows us to redefine a function. It gives us the ability to perform the same function but in different ways. It allows a programmer to reuse and extend that code. The same code acts differently depending on the situation.

The user does not have to know the exact type of the object in advance. The behaviour of the object can be implemented at run time. It is called **late binding** or **dynamic binding**. Polymorphism is implemented by using **virtual functions**.

```cpp
#include <iostream>
using namespace std;
class Animal{
    public:
        Animal(){};
        virtual void makeSound(){
            cout << "Animal making sound." << endl;
        };
};
class Dog :public Animal{
    public:
        Dog(){};
        void makeSound(){
            cout << "Barking" << endl;
        };
};
class Cat :public Animal{
    public:
        Cat(){};
        void makeSound(){
          cout << "Meow" << endl;  
        };
};
class Duck :public Animal{
    public:
        Duck(){};
        void makeSound(){
            cout << "Quack" << endl;
        };
};
int main() {
    Dog d;
    Cat c;
    Duck du;
    d.makeSound();
    c.makeSound();
    du.makeSound();
    return 0;
};
// OUTPUT
// Barking
// Meow
// Quack
```

#### Early Binding

The assignment of types to variables and expression at compilation time is known as **early binding**. It is also called **static binding**. The early binding occurs when everything required to call a function is known at compile time. Early binding enables the compiler to know exactly which function will be called when a certain statement is executed.

When a program is compiled, the compiler checks the function call and decides which function is to be executed. This process takes place during compilation in normal programs with function.

#### Late Binding

The assignmen of types to variables and expression at execution time is known as **late binding**. It is also called **dynamic binding**. The late binding occurs when some information to call a function is decided at run time. The compiler does not know at compile time which function will be executed. It provides more flexibility.
