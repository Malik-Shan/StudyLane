---
draft: false
readtime: true
subject: oop-cs-102
title: Abstract Classes and Interfaces
published: 2024-11-03T03:17:00.000Z
bnnerImg:
  discriminant: false
category: []
tag: []
postedBy: admin
---
## Virtual & Pure Virtual Function

##### Virutal Function:

Virtual means existing in effect but not in reality. A function that is declared in base class with `virtual`keyword and is redefined/overridden in derived class. It appears to exist in some part of a program but doesn't really exist. It is used to implement polymorphism enabling user to execute different functions by the same function name.

##### Pure Virtual Function:

A type of virtual function that has no body is known as **pure virtual function**. Pure virtual function is declared in base class with `virtual`keyword and must be redefined in derived class. It is declared by assigning 0 in it's declaration. If the pure virtual function is not redefined in the derived class, then derived class also becomes abstract class.

```cpp
class Shape{
    public:
        // virtual function
        virtual void set_shape(){
            cout << "Set shape." << endl;
        };
        // pure virtual function
        virtual void set_shape() = 0;
};
```

## Abstract Classes

*"An abstract class is class that is design to be treated as a base class upon which other classes can be built. It can not be used to initiate objects."*

A class that has atleast one pure virtual function which must be redefined or overridden in derived class else it also becomes abstract class.

```cpp
#include <iostream>
#include <string>
using namespace std;
class Animal {
public:
    // Pure virtual function (makes the class abstract)
    virtual void makeSound() const = 0;
    // Regular member function with an implementation
    void eat() const {
        cout << "Eating...\n";
    };
};
class Dog : public Animal {
public:
    void makeSound() const override {
        cout << "Woof! Woof!\n";
    };
};
int main() {
    Dog dog;
    dog.makeSound();  // Output: Woof! Woof!
    dog.eat();        // Output: Eating...

    return 0;
};
```

## Interfaces

An interface describes the behavior or capabilities of a class without committing to a particular implementation of that class.  It only contains pure virtual function with no data members or functions.

The interfaces are implemented using **abstract classes** and these abstract classes should not be confused with data abstraction which is a concept of keeping implementation details separate from associated data.

The purpose of an **abstract class** (often referred to as an ABC) is to provide an appropriate base class from which other classes can inherit. Abstract classes cannot be used to instantiate objects and serves only as an **interface**. Attempting to instantiate an object of an abstract class causes a compilation error.

If the class made from abstract class needs to initiate an object, it needs to implement all the virtual functions meaing it supports the interface defined by the abstract class. Failure to redefine all the virtual functions and than initiating object from that class causes compilation error.

Class that can be used to initiate an object is called concrete class.

```cpp
#include <iostream>
using namespace std;
class Sound {
public:
    // Pure virtual function, defining an interface
    virtual void makeSound() const = 0;
};
class Dog : public Sound {
public:
    void makeSound() const override {
        cout << "Woof! Woof!\n";
    };
};
class Cat : public Sound {
public:
    void makeSound() const override {
        cout << "Meow! Meow!\n";
    };
};
int main() {
    Dog dog;
    Cat cat;

    dog.makeSound();  // Output: Woof! Woof!
    cat.makeSound();  // Output: Meow! Meow!

    return 0;
};
```
