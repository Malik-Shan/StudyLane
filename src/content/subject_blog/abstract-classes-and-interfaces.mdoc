---
draft: false
readtime: true
title: Abstract Classes and Interfaces
published: 2024-11-03T03:17:00.000Z
bannerImg:
  discriminant: false
category:
  - programming
tag: []
postedBy: admin
---
## Virtual & Pure Virtual Function

##### Virutal Function:

Virtual means existing in effect but not in reality. A function that is declared in base class with `virtual`keyword and is redefined/overridden in derived class. It appears to exist in some part of a program but doesn't really exist. It is used to implement polymorphism enabling user to execute different functions by the same function name.

##### Pure Virtual Function:

A type of virtual function that has no body is known as **pure virtual function**. Pure virtual function is declared in base class with `virtual`keyword and must be redefined in derived class. It is declared by assigning 0 in it's declaration. If the pure virtual function is not redefined in the derived class, then derived class also becomes abstract class.

```cpp
class Shape{
    public:
        // virtual function
        virtual void set_shape(){
            cout << "Set shape." << endl;
        };
        // pure virtual function
        virtual void set_shape() = 0;
};
```

## Abstract Classes

*"An abstract class is class that is design to be treated as a base class upon which other classes can be built. It can not be used to initiate objects."*

A class that has atleast one pure virtual function which must be redefined or overridden in derived class else it also becomes abstract class. An abstract class can not be used directly. It means that no object of an abstract class can be created. However, a child class can inherit an abstract class and use it by overriding its pure virtual function.

The abstract classes are used to create a model class. Any user who creates a new class inheriting an abstract class has to override the pure virtual functions. The child class also becomes an abstract class if any of the pure virtual functions is not overridden in child class.

```
virtual return_type function_name() = 0;
```

**virtual:** It is a keyword used to declare virtual function

**return\_type:** It indicates the type of value return by the function

**function\_name:** It indicates the name of the function

**= 0:** It indicates that the function is a pure virtual function

```cpp
#include <iostream>
#include <string>
using namespace std;
class Animal {
public:
    // Pure virtual function (makes the class abstract)
    virtual void makeSound() const = 0;
    // Regular member function with an implementation
    void eat() const {
        cout << "Eating...\n";
    };
};
class Dog : public Animal {
public:
    void makeSound() const override {
        cout << "Woof! Woof!\n";
    };
};
int main() {
    Dog dog;
    dog.makeSound();  // Output: Woof! Woof!
    dog.eat();        // Output: Eating...

    return 0;
};
```

[Execute Code](https://www.programiz.com/online-compiler/8RZLiRj8sCtnt)

## Interfaces

An interface describes the behavior or capabilities of a class without committing to a particular implementation of that class. It only contains pure virtual functions with no data members or regular functions that have implementations.

The interfaces are implemented using **abstract classes**, and these abstract classes should not be confused with data abstraction, which is a concept of keeping implementation details separate from associated data.

The purpose of an **abstract class** (often referred to as an ABC) is to provide an appropriate base class from which other classes can inherit. Abstract classes cannot be used to instantiate objects and serve only as an **interface**. Attempting to instantiate an object of an abstract class causes a compilation error.

If a class derived from an abstract class needs to instantiate an object, it must implement all the pure virtual functions, meaning it supports the interface defined by the abstract class. Failure to redefine all the pure virtual functions and then attempting to instantiate an object from that class causes a compilation error.

Class that can be used to initiate an object is called **concrete class**.

```cpp
#include <iostream>
using namespace std;
class Sound {
public:
    // Pure virtual function, defining an interface
    virtual void makeSound() const = 0;
    virtual ~Sound() = default;
};
class Dog : public Sound {
public:
    void makeSound() const override {
        cout << "Woof! Woof!\n";
    };
};
class Cat : public Sound {
public:
    void makeSound() const override {
        cout << "Meow! Meow!\n";
    };
};
int main() {
    Dog dog;
    Cat cat;

    dog.makeSound();  // Output: Woof! Woof!
    cat.makeSound();  // Output: Meow! Meow!

    return 0;
};
```
