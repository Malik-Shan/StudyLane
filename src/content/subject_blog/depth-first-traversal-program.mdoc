---
draft: false
readtime: true
title: Depth First Traversal (Program)
published: 2025-05-01T22:15:00.000Z
bannerImg:
  discriminant: false
category:
  - data-structure
tag: []
postedBy: admin
---
```cpp
#include <iostream>
#include <map>
#include <list>
#include <set>
using namespace std;

class Graph {
    map<int, list<int>> adjList;  // Adjacency list

public:
    // Add an edge (undirected)
    void add_edge(int u, int v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u); // Comment this for directed graph
    }

    // Public function to start DFS traversal
    void depth_first_traversal(int start) {
        set<int> visited;
        cout << "Depth-First Traversal starting from node " << start << ": ";
        dfs_helper(start, visited);
        cout << endl;
    }

private:
    // Recursive DFS helper
    void dfs_helper(int node, set<int>& visited) {
        visited.insert(node);
        cout << node << " ";

        for (int neighbor : adjList[node]) {
            if (visited.find(neighbor) == visited.end()) {
                dfs_helper(neighbor, visited);
            }
        }
    }
};

int main() {
    Graph g;

    // Add edges to the graph
    g.add_edge(0, 1);
    g.add_edge(0, 2);
    g.add_edge(1, 3);
    g.add_edge(2, 4);
    g.add_edge(3, 4);
    g.add_edge(4, 5);

    // Perform DFS starting from node 0
    g.depth_first_traversal(0);

    return 0;
}
//Depth-First Traversal starting from node 0: 0 1 3 4 2 5 
```
