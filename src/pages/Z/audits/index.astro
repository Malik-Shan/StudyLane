---
export const prerender = false;
import {db,Audits as zAudits,desc} from 'astro:db';
import Note from '../../../components/Note.astro';
const audits = await db.select().from(zAudits).orderBy(desc(zAudits.id));
import '../../../stylesheet/z.css';
---
<!DOCTYPE html>
<html>
  <head>
    <title>Note Pad Online</title>
    <link rel="stylesheet" href="https://cdn.ckeditor.com/ckeditor5/42.0.1/ckeditor5.css" />
    <script defer src='/assests/js/htmx.min.js'></script>
  </head>
  <body>
    <form hx-post="/partials/notes/create" hx-swap="afterbegin" hx-target="#cards">
      <textarea id='links' class='note-textarea' name='links' style="width:100%;" rows='10'></textarea>
    <button class='submit' type='submit'>Post</button>
    </form>
    <div id='cards'>
      {
      audits.map((a) => (
        <Note id={a.id} date={a.date} data={a.links} />
      ))
      }
    </div>
  </body>
</html>
<script>
import {
	ClassicEditor,
	AccessibilityHelp,
	Autoformat,
	AutoLink,
	Autosave,
	BalloonToolbar,
	Bold,
	Code,
	CodeBlock,
	Essentials,
	FullPage,
	GeneralHtmlSupport,
	Heading,
	HtmlComment,
	HtmlEmbed,
	Italic,
	Link,
	Paragraph,
	SelectAll,
	ShowBlocks,
	SourceEditing,
	Table,
	TableCaption,
	TableCellProperties,
	TableColumnResize,
	TableProperties,
	TableToolbar,
	TextTransformation,
	Undo
} from 'ckeditor5';

const editorConfig:any = {
	toolbar: {
		items: [
			'undo',
			'redo',
			'|',
			'sourceEditing',
			'showBlocks',
			'selectAll',
			'|',
			'heading',
			'|',
			'bold',
			'italic',
			'code',
			'|',
			'link',
			'insertTable',
			'codeBlock',
			'htmlEmbed',
			'|',
			'accessibilityHelp'
		],
		shouldNotGroupWhenFull: false
	},
	plugins: [
		AccessibilityHelp,
		Autoformat,
		AutoLink,
		Autosave,
		BalloonToolbar,
		Bold,
		Code,
		CodeBlock,
		Essentials,
		FullPage,
		GeneralHtmlSupport,
		Heading,
		HtmlComment,
		HtmlEmbed,
		Italic,
		Link,
		Paragraph,
		SelectAll,
		ShowBlocks,
		SourceEditing,
		Table,
		TableCaption,
		TableCellProperties,
		TableColumnResize,
		TableProperties,
		TableToolbar,
		TextTransformation,
		Undo
	],
	balloonToolbar: ['bold', 'italic', '|', 'link'],
	heading: {
		options: [
			{
				model: 'paragraph',
				title: 'Paragraph',
				class: 'ck-heading_paragraph'
			},
			{
				model: 'heading1',
				view: 'h1',
				title: 'Heading 1',
				class: 'ck-heading_heading1'
			},
			{
				model: 'heading2',
				view: 'h2',
				title: 'Heading 2',
				class: 'ck-heading_heading2'
			},
			{
				model: 'heading3',
				view: 'h3',
				title: 'Heading 3',
				class: 'ck-heading_heading3'
			},
			{
				model: 'heading4',
				view: 'h4',
				title: 'Heading 4',
				class: 'ck-heading_heading4'
			},
			{
				model: 'heading5',
				view: 'h5',
				title: 'Heading 5',
				class: 'ck-heading_heading5'
			},
			{
				model: 'heading6',
				view: 'h6',
				title: 'Heading 6',
				class: 'ck-heading_heading6'
			}
		]
	},
	htmlSupport: {
		allow: [
			{
				name: /^.*$/,
				styles: true,
				attributes: true,
				classes: true
			}
		]
	},
	link: {
		addTargetToExternalLinks: true,
		defaultProtocol: 'https://',
		decorators: {
			toggleDownloadable: {
				mode: 'manual',
				label: 'Downloadable',
				attributes: {
					download: 'file'
				}
			}
		}
	},
	placeholder: 'Type or paste your content here!',
	table: {
		contentToolbar: ['tableColumn', 'tableRow', 'mergeTableCells', 'tableProperties', 'tableCellProperties']
	}
};


function swapEditor(el:HTMLTextAreaElement){
ClassicEditor.create(el, editorConfig);
}
const mainEditor = document.querySelector("#links") as HTMLTextAreaElement;
swapEditor(mainEditor);
document.body.addEventListener("htmx:afterSwap", (e:CustomEvent) => {
  if(e.detail.target.id === 'update-btn'){
    const t = e.detail.elt.firstElementChild;
    console.log(t);
    swapEditor(t);
  }
})

</script>
