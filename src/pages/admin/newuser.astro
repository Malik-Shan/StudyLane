---
export const prerender = false;
import DefaultLayout from '../../layouts/DefaultLayout.astro';
import {app} from '../../firebase/server';
import {getFirestore} from 'firebase-admin/firestore';
import {getAuth} from 'firebase-admin/auth';

interface User {
	uid:string;
	name: string;
	email: string;
	roles: string;
}
const auth = getAuth(app)

if(!Astro.cookies.has('session')){
	return Astro.redirect('/login');
}
const sessionCookie = Astro.cookies.get('session').value;
let decodedCookie;
try {
	decodedCookie = await auth.verifySessionCookie(sessionCookie);
}catch(err){
	Astro.cookies.set('session','', {expires : new Date(0)});
	return Astro.redirect('/login');
}
if(!decodedCookie.admin){
	return Astro.redirect('/404')
}
let user; 
try {
	user = await auth.getUser(decodedCookie.uid);
} catch(err){
	Astro.cookies.set('session','', {expires : new Date(0)});
	return Astro.redirect('/login');
}

const db = getFirestore(app);
const usersRef = db.collection('users');
const usersSnap = await usersRef.get()
const users = usersSnap.docs.reverse().map((u) => ({
	uid: u.id,
	...u.data(),
})) as User[]
---
<DefaultLayout title='Add User'>
	<section class='adduserSection container mx-auto px-3'>
		<form 
			hx-post='/api/auth/registerUser'
			hx-swap='afterbegin'
			hx-target='#allUsers'
			hx-trigger='submit'
			hx-on::after-request=" if(event.detail.successful) this.reset()"
			method='post'
			class='newUser flex flex-row gap-2 justify-center mt-4'>
			<input type='text' name='name' placeholder='Name' />
			<input type="email" name='email' placeholder='Email'/>
			<input type="password" name='password' placeholder='Password'/>
			<input type="text" name='roles' placeholder='Roles1,Roles2 etc'/>
			<button class='primaryBtn p-1 rounded-sm border-2' type='submit'>Add</button>
		</form>
		<div id='allUsers' class='mt-6 space-y-2'>
			{
			users.map((u) => (
				<div class='user' data-id={u.uid} id={`uid-${u.uid}`}>
					<p>{u.name}</p>
					<p>{u.email}</p>
					<p>{u.roles}</p>
					<button class='secondaryBtn p-1 px-2 rounded-md border'><i class="fa-solid fa-pen-to-square"></i></button>
					<button class='dangerBtn p-1 px-2 rounded-md border'
						hx-delete='/api/auth/del_user'
						hx-swap='delete swap:400ms'
						hx-headers={`{"uid":"${u.uid}"}`}
						hx-target={`#uid-${u.uid}`}
						hx-trigger='click'
						hx-confirm='Are you sure?'
						type='button'><i class="fa-solid fa-trash"></i></button>
				</div>))
			}
		</div>
	</section>
</DefaultLayout>
<style is:global>
.newUser input {
	@apply border border-slate-300 px-2 rounded-sm text-base w-full;
}
.user {
	display:grid;
	grid-template-columns: 3fr 3fr 3fr max-content max-content;
	@apply items-center gap-2;
}
.user.htmx-swapping{
	animation:disappear 400ms ease-out;
}
@keyframes disappear {
0% {
	opacity:1;
}
85% {
	opacity:0;
}
100%{
	opacity:0;
	display:none;
}
}
.user p{
	@apply flex justify-center items-center bg-slate-300 h-full w-full text-sm rounded-sm px-2;
}
</style>
