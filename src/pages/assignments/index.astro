---
export const prerender = false;
import DefaultLayout from '../../layouts/DefaultLayout.astro';
import AssignmentData from '../../components/AssignmentData.astro';
import {getFirestore} from 'firebase-admin/firestore';
import {app} from '../../firebase/server';
import {getAuth} from 'firebase-admin/auth';

interface Assignment {
	id:string;
	assignment:string;
	link:string;
	subject:string;
	type:string;
	date:string;
}

const db = getFirestore(app);
const auth = getAuth(app);

if(!Astro.cookies.has('session')){
	return Astro.redirect('/login');
}
const sessionCookie = Astro.cookies.get('session').value;
let decodedCookie;
try {
	decodedCookie = await auth.verifySessionCookie(sessionCookie);
}catch(err){
	Astro.cookies.set('session','', {expires : new Date(0)});
	return Astro.redirect('/login');
}
let user; 
try {
	user = await auth.getUser(decodedCookie.uid);
} catch(err){
	Astro.cookies.set('session','', {expires : new Date(0)});
	return Astro.redirect('/login');
}
const assignmentsRef = db.collection('assignments');
const assignmentsSnap = await assignmentsRef.get()
const assignments = assignmentsSnap.docs.reverse().map((u) => ({
	id: u.id,
	...u.data(),
})) as Assignment[]
---
<DefaultLayout title='Assignments'>
	<section class='container mx-auto px-6 section-nav-pb pt-4'>
		{
		user.customClaims.admin && 
			(
				<div>
					<h2 class='text-center text-xl font-bold text-slate-400 mb-2'>Add New Assignment</h2>
					<form class='addAssignment pb-4'
						hx-post='/api/database/assignment'
						hx-swap='afterbegin'
						hx-target='#assignments'
						hx-on::after-request=" if(event.detail.successful) this.reset()"
						hx-trigger='submit'>
						<input required placeholder='Assignment' type='text' name='assignment' />
						<input required placeholder='Link' type='text' name='link' />
						<select required name='subject' id='subject'>
							<option value='English'>English</option>
							<option value='Computer'>Computer</option>
							<option value='Programming'>Programming</option>
							<option value='Islamiat'>Islamiat</option>
							<option value='Calculus'>Calculus</option>
						</select>
						<select required name='type' id='type'>
							<option value='Presentation'>Presentation</option>
							<option value='Quiz'>Quiz</option>
							<option value='Written'>Written</option>
						</select>
						<input type='date' name='date' id='date' />
						<button class='primaryBtn p-1 px-2 rounded-md border' type='submit'>+</button>
					</form>
				</div>
			)
		}
		<div class='allAssignments'>
			<div class='heading items-center max-sm:text-lg max-sm:text-center max-sm:mb-2'>
				<h2 class='max-sm:text-2xl max-sm:text-slate-500'>Assignments</h2>
				<h2 class='p-2 px-8 max-sm:hidden'>Date</h2>
			</div>

			<div id='assignments' class='space-y-2'>
{
				assignments.map((a) => (
					<AssignmentData id={a.id} todo={a.assignment} link={a.link} type={a.type} subject={a.subject} date={a.date} admin={user.customClaims.admin} />
				))
				}
			</div>
		</div>
	</section>
</DefaultLayout>
<style is:global>
.addAssignment{
	@apply flex flex-row gap-2 max-sm:flex-col;
}
.addAssignment input,
.addAssignment select{
	@apply border block w-full px-2 border-slate-300 p-1 rounded-md max-sm:text-sm;
}
.heading {
	display:grid;
	grid-template-columns: 1fr max-content;
}
.heading h2{
	@apply font-bold underline;
}
</style>
